name: Security Checks

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  schedule:
    # Run security checks weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run security audit
      run: |
        echo "🔍 Running security audit..."
        yarn audit --level moderate --json | tee audit-results.json || true

    - name: Check for high/critical vulnerabilities
      run: |
        if yarn audit --level high --json > /dev/null 2>&1; then
          echo "❌ High or critical vulnerabilities found!"
          yarn audit --level high
          exit 1
        else
          echo "✅ No high or critical vulnerabilities found"
        fi

    - name: Audit production dependencies only
      run: |
        echo "🔍 Auditing production dependencies..."
        yarn audit --level moderate --groups dependencies

    - name: Check for outdated packages
      run: |
        echo "📦 Checking for outdated packages..."
        yarn outdated || true

    - name: Verify lockfile integrity
      run: |
        echo "🔒 Verifying lockfile integrity..."
        if ! git diff --quiet yarn.lock; then
          echo "❌ yarn.lock has uncommitted changes"
          exit 1
        fi

  secrets-detection:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Check for common secret patterns
      run: |
        echo "🔍 Scanning for common secret patterns..."
        
        # Check for AWS keys
        if grep -r "AKIA[0-9A-Z]{16}" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "❌ Potential AWS access key found!"
          exit 1
        fi
        
        # Check for private keys
        if grep -r "BEGIN.*PRIVATE KEY" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "❌ Potential private key found!"
          exit 1
        fi
        
        # Check for common secret keywords
        if grep -ri "password\|secret\|token\|key" .env* 2>/dev/null | grep -v ".example" | grep -v "#"; then
          echo "⚠️ Check .env files for hardcoded secrets"
        fi
        
        echo "✅ No obvious secrets detected"

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        deny-licenses: GPL-1.0, GPL-2.0, GPL-3.0

  codeql-analysis:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule' # Skip on scheduled runs to save credits
    
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  security-summary:
    runs-on: ubuntu-latest
    needs: [security-audit, secrets-detection]
    if: always()
    
    steps:
    - name: Security Summary
      run: |
        echo "## 🛡️ Security Check Summary" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.security-audit.result }}" = "success" ]; then
          echo "✅ **Security Audit**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security Audit**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.secrets-detection.result }}" = "success" ]; then
          echo "✅ **Secrets Detection**: No secrets found" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Secrets Detection**: Potential secrets detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recommendations:" >> $GITHUB_STEP_SUMMARY
        echo "- Regularly update dependencies" >> $GITHUB_STEP_SUMMARY
        echo "- Use GitHub Secrets for sensitive data" >> $GITHUB_STEP_SUMMARY
        echo "- Review security alerts weekly" >> $GITHUB_STEP_SUMMARY
        echo "- Enable Dependabot for automated updates" >> $GITHUB_STEP_SUMMARY